import Head from "next/head";
import React, { useEffect } from "react";
import { useRouter } from "next/router";
import { api } from "~/utils/api";
import { UserForm } from "~/components/UserForm";
import { SubmitHandler, useForm } from "react-hook-form";

const UserSlugPage = () => {
  const router = useRouter();
  const userID = router.query.slug;
  const utils = api.useContext();

  const initialData = api.example.getUser.useQuery({ userID: userID });
  const userMutation = api.example.updateUser.useMutation({
    onSuccess(data) {
      utils.example.getUser.invalidate().catch((err) => {
        // Handle error here
        console.error(err);
      });
    },
  });

  const { register, handleSubmit, setValue } = useForm<IFormInputs>();

  useEffect(() => {
    if (initialData.isSuccess && initialData.data) {
      setValue("firstName", initialData.data.firstName);
      setValue("lastName", initialData.data.lastName);
      setValue("country", initialData.data.country);
      setValue("password", initialData.data.password);
      setValue("age", initialData.data.age);
    }
  }, [initialData, setValue]);

  const onSubmit: SubmitHandler<IFormInputs> = (data) => {
    if (typeof userID !== "string") return;

    userMutation.mutate({
      firstName: data.firstName,
      lastName: data.lastName,
      country: data.country,
      password: data.password,
      age: data.age,
      id: userID,
    });
  };

  if (typeof userID !== "string") {
    return <div>Error...</div>;
  }

  if (initialData.isLoading) {
    return <div>Loading...</div>;
  }

  if (initialData.isError || initialData.data == null) {
    return <div>Error...</div>;
  }
  return (
    <>
      <Head>
        <title>User Page</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen w-screen flex-col items-center justify-center gap-y-5">
        <h1 className="text-lg font-bold">Edit User Data</h1>
        <section className="h-max w-full bg-black md:w-[50%]">
          <div
            key={initialData.data.id}
            className="hover:border-lg h-[200px] w-full cursor-pointer rounded-lg bg-black p-2 text-white hover:border-[2px] hover:border-black hover:bg-white hover:text-black"
          >
            <div className="mt-2">first Name: {initialData.data.firstName}</div>
            <div className="mt-2">last Name: {initialData.data.lastName}</div>
            <div className="mt-2">last Name: {initialData.data.age}</div>
            <div className="mt-2">id: {initialData.data.id}</div>
            <div className="mt-2 truncate">
              hash: {initialData.data.password}
            </div>
          </div>
        </section>
        <section className="h-[40%] w-full  md:w-[50%] md:outline-dashed">
          <UserForm
            handleSubmit={handleSubmit}
            onSubmit={onSubmit}
            register={register}
          />
        </section>
      </main>
    </>
  );
};

export default UserSlugPage;
