import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { SubmitHandler, UseFormRegister, useForm } from "react-hook-form";

import { api } from "~/utils/api";

interface IFormInputs {
  firstName: string;
  lastName: string;
  country: string;
  password: string;
  age: string;
}

const Home: NextPage = () => {
  const utils = api.useContext();

  const initialData = api.example.getAllUsers.useQuery();
  const userMutation = api.example.createUser.useMutation({
    onSuccess(data) {
      utils.example.getAllUsers.invalidate();
    },
  });

  const { register, handleSubmit, setValue } = useForm({
    defaultValues: {
      firstName: "",
      lastName: "",
      country: "",
      password: "",
      age: "",
    },
  });

  const onSubmit: SubmitHandler<IFormInputs> = (data) => {
    // console.log(data);
    userMutation.mutate({
      firstName: data.firstName,
      lastName: data.lastName,
      country: data.country,
      password: data.password,
      age: data.age,
    });
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen w-screen flex-col items-center justify-center gap-x-5 md:flex-row">
        <form
          onSubmit={handleSubmit(onSubmit)}
          className="flex flex-col gap-y-3"
        >
          <FormWrapper
            labelName="First Name"
            register={register}
            fieldName="firstName"
          />
          <FormWrapper
            labelName="Last Name"
            register={register}
            fieldName="lastName"
          />
          <FormWrapper
            labelName="Country"
            register={register}
            fieldName="country"
          />
          <FormWrapper
            labelName="Password"
            register={register}
            fieldName="password"
          />
          <FormWrapper labelName="Age" register={register} fieldName="age" />
          <div className="flex h-full w-full justify-center">
            <input className="h-full w-[40%] bg-purple-300" type="submit" />
          </div>{" "}
        </form>
        {/* rendered users */}
        {initialData.data?.length ? (
          <section className="flex h-full flex-col justify-center">
            <h2 className="text-center text-lg font-bold">User Data</h2>
            <div className="flex h-[400px] w-[300px] flex-col gap-y-3 overflow-hidden overflow-y-scroll text-black">
              {initialData.data
                .slice()
                .reverse()
                .map((userData) => (
                  <div
                    key={userData.id}
                    className="hover:border-lg h-[200px] w-full cursor-pointer rounded-lg bg-black p-2 text-white hover:border-[2px] hover:border-black hover:bg-white hover:text-black"
                  >
                    <div>first Name: {userData.firstName}</div>
                    <div>last Name: {userData.lastName}</div>
                    <div>id: {userData.id}</div>
                    <div className="truncate">hash: {userData.password}</div>
                  </div>
                ))}
            </div>
          </section>
        ) : null}
      </main>
    </>
  );
};

export default Home;

interface FormWrapperType {
  register: UseFormRegister<IFormInputs>;
  labelName: string;
  fieldName: keyof IFormInputs;
}

const FormWrapper = (props: FormWrapperType) => {
  return (
    <label className="flex w-full flex-col">
      {props.labelName}

      <input
        className="border border-black px-2"
        {...props.register(props.fieldName)}
      />
    </label>
  );
};
